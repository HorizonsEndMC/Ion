package net.horizonsend.ion.server.features.starship

import net.horizonsend.ion.server.IonServer
import net.horizonsend.ion.server.configuration.StarshipBalancing
import net.horizonsend.ion.server.features.progression.Levels
import net.horizonsend.ion.server.miscellaneous.utils.setDisplayNameAndGet
import net.horizonsend.ion.server.miscellaneous.utils.setLoreAndGet
import net.kyori.adventure.text.Component
import net.kyori.adventure.text.Component.text
import net.kyori.adventure.text.format.TextColor
import org.bukkit.Material
import org.bukkit.entity.Player
import org.bukkit.inventory.ItemStack
import java.util.function.Supplier

enum class StarshipType(
	val displayName: String,
	val minSize: Int,
	val maxSize: Int,
	val minLevel: Int,
	val containerPercent: Double,
	val concretePercent: Double = 0.3,
	val crateLimitMultiplier: Double,
	val sneakFlyAccelDistance: Int,
	val maxSneakFlyAccel: Int,
	val interdictionRange: Int,
	val hyperspaceRangeMultiplier: Double,
	menuItemMaterial: Material,
	val isWarship: Boolean,
	val color: String,
	val overridePermission: String,
	val eventship: Boolean = false,
	val poweroverrider: Double = 1.0,
	val maxMiningLasers: Int = 0,
	val miningLaserTier: Int = 0,
	val dynmapIcon: String = "anchor",
	val cruiseSpeedMultiplier: Double = 1.0,
	val balancingSupplier: Supplier<StarshipBalancing>
) {
	SPEEDER(
		displayName = "Speeder",
		minSize = 25,
		maxSize = 100,
		minLevel = 1,
		containerPercent = 0.25,
		concretePercent = 0.0,
		crateLimitMultiplier = 0.125,
		sneakFlyAccelDistance = 3,
		maxSneakFlyAccel = 3,
		interdictionRange = 10,
		hyperspaceRangeMultiplier = 3.0,
		menuItemMaterial = Material.DEAD_BUSH,
		isWarship = false,
		color = "#ffff32",
		overridePermission = "ion.ships.override.1",
		poweroverrider = 0.0,
		balancingSupplier = IonServer.starshipBalancing::speeder
	),
	AI_SPEEDER(
		displayName = "Speeder",
		minSize = 25,
		maxSize = 100,
		minLevel = 1,
		containerPercent = 0.25,
		crateLimitMultiplier = 0.125,
		sneakFlyAccelDistance = 3,
		maxSneakFlyAccel = 3,
		interdictionRange = 10,
		hyperspaceRangeMultiplier = 3.0,
		menuItemMaterial = Material.SPONGE,
		isWarship = false,
		color = "#ffff32",
		poweroverrider = 0.0,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.speeder",
		balancingSupplier = IonServer.starshipBalancing::speeder
	),
	STARFIGHTER(
		displayName = "Starfighter",
		minSize = 350,
		maxSize = 500,
		minLevel = 1,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 4,
		maxSneakFlyAccel = 4,
		interdictionRange = 600,
		hyperspaceRangeMultiplier = 1.5,
		menuItemMaterial = Material.IRON_NUGGET,
		isWarship = true,
		color = "#ff8000",
		overridePermission = "ion.ships.override.1",
		dynmapIcon = "starfighter",
		balancingSupplier = IonServer.starshipBalancing::starfighter
	),
	AI_STARFIGHTER(
		displayName = "Starfighter",
		minSize = 350,
		maxSize = 500,
		minLevel = 1,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 4,
		maxSneakFlyAccel = 4,
		interdictionRange = 600,
		hyperspaceRangeMultiplier = 1.5,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#ff8000",
		dynmapIcon = "starfighter",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.starfighter",
		balancingSupplier = IonServer.starshipBalancing::aiStarfighter
	),
	GUNSHIP(
		displayName = "Gunship",
		minSize = 500,
		maxSize = 2000,
		minLevel = 10,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 2,
		interdictionRange = 1200,
		hyperspaceRangeMultiplier = 1.6,
		menuItemMaterial = Material.IRON_INGOT,
		isWarship = true,
		color = "#ff4000",
		overridePermission = "ion.ships.override.10",
		dynmapIcon = "gunship",
		balancingSupplier = IonServer.starshipBalancing::gunship
	),
	AI_GUNSHIP(
		displayName = "Gunship",
		minSize = 500,
		maxSize = 2000,
		minLevel = 10,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 2,
		interdictionRange = 1200,
		hyperspaceRangeMultiplier = 1.6,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#ff4000",
		dynmapIcon = "gunship",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.gunship",
		balancingSupplier = IonServer.starshipBalancing::aiGunship
	),
	CORVETTE(
		displayName = "Corvette",
		minSize = 2000,
		maxSize = 4000,
		minLevel = 20,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 6,
		maxSneakFlyAccel = 2,
		interdictionRange = 1800,
		hyperspaceRangeMultiplier = 1.7,
		menuItemMaterial = Material.IRON_BLOCK,
		isWarship = true,
		color = "#ff0000",
		overridePermission = "ion.ships.override.20",
		dynmapIcon = "corvette",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		balancingSupplier = IonServer.starshipBalancing::corvette
	),
	AI_CORVETTE(
		displayName = "Corvette",
		minSize = 2000,
		maxSize = 4000,
		minLevel = 20,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 8,
		maxSneakFlyAccel = 4,
		interdictionRange = 1800,
		hyperspaceRangeMultiplier = 1.7,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#ff0000",
		dynmapIcon = "corvette",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.corvette",
		balancingSupplier = IonServer.starshipBalancing::aiCorvette
	),
	FRIGATE(
		displayName = "Frigate",
		minSize = 4000,
		maxSize = 8000,
		minLevel = 40,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 6,
		maxSneakFlyAccel = 2,
		interdictionRange = 2400,
		hyperspaceRangeMultiplier = 1.8,
		menuItemMaterial = Material.LAPIS_BLOCK,
		isWarship = true,
		color = "#c00000",
		overridePermission = "ion.ships.override.40",
		dynmapIcon = "frigate",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		balancingSupplier = IonServer.starshipBalancing::frigate
	),
	AI_FRIGATE(
		displayName = "Frigate",
		minSize = 4000,
		maxSize = 8000,
		minLevel = 40,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 6,
		maxSneakFlyAccel = 2,
		interdictionRange = 2400,
		hyperspaceRangeMultiplier = 1.8,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#c00000",
		dynmapIcon = "frigate",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.frigate",
		balancingSupplier = IonServer.starshipBalancing::aiFrigate
	),
	DESTROYER(
		displayName = "Destroyer",
		minSize = 8000,
		maxSize = 12000,
		minLevel = 60,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 3000,
		hyperspaceRangeMultiplier = 1.9,
		menuItemMaterial = Material.GOLD_BLOCK,
		isWarship = true,
		color = "#800000",
		overridePermission = "ion.ships.override.60",
		dynmapIcon = "destroyer",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		balancingSupplier = IonServer.starshipBalancing::destroyer
	),
	AI_DESTROYER(
		displayName = "Destroyer",
		minSize = 8000,
		maxSize = 12000,
		minLevel = 60,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 3000,
		hyperspaceRangeMultiplier = 1.9,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#800000",
		dynmapIcon = "destroyer",
		maxMiningLasers = 1,
		miningLaserTier = 1,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.destroyer",
		balancingSupplier = IonServer.starshipBalancing::aiDestroyer
	),
	BATTLECRUISER(
		displayName = "Battlecruiser",
		minSize = 12000,
		maxSize = 20000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 2400,
		hyperspaceRangeMultiplier = 2.5,
		menuItemMaterial = Material.DIAMOND_BLOCK,
		isWarship = true,
		color = "#0c5ce8",
		overridePermission = "ion.ships.override.battlecruiser",
		cruiseSpeedMultiplier = 0.875,
		balancingSupplier = IonServer.starshipBalancing::battlecruiser
	),
	AI_BATTLECRUISER(
		displayName = "Battlecruiser",
		minSize = 12000,
		maxSize = 20000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 2400,
		hyperspaceRangeMultiplier = 2.5,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#0c5ce8",
		cruiseSpeedMultiplier = 0.875,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.battlecruiser",
		balancingSupplier = IonServer.starshipBalancing::aiBattlecruiser
	),
	BATTLESHIP(
		displayName = "Battleship",
		minSize = 20000,
		maxSize = 32000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 2800,
		hyperspaceRangeMultiplier = 2.6,
		menuItemMaterial = Material.MAGMA_BLOCK,
		isWarship = true,
		color = "#0c5ce8",
		overridePermission = "ion.ships.override.battleship",
		cruiseSpeedMultiplier = 0.8,
		balancingSupplier = IonServer.starshipBalancing::battleship
	),
	AI_BATTLESHIP(
		displayName = "Battleship",
		minSize = 20000,
		maxSize = 32000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 3,
		interdictionRange = 2800,
		hyperspaceRangeMultiplier = 2.6,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#0c5ce8",
		cruiseSpeedMultiplier = 0.8,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.battleship",
		balancingSupplier = IonServer.starshipBalancing::aiBattleship
	),
	DREADNOUGHT(
		displayName = "Dreadnought",
		minSize = 32000,
		maxSize = 48000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 2,
		interdictionRange = 3200,
		hyperspaceRangeMultiplier = 2.7,
		menuItemMaterial = Material.EMERALD_BLOCK,
		isWarship = true,
		color = "#320385",
		overridePermission = "ion.ships.override.dreadnought",
		cruiseSpeedMultiplier = 0.7,
		balancingSupplier = IonServer.starshipBalancing::dreadnought
	),
	AI_DREADNOUGHT(
		displayName = "Dreadnought",
		minSize = 32000,
		maxSize = 48000,
		minLevel = 1000,
		containerPercent = 0.025,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 2,
		interdictionRange = 3200,
		hyperspaceRangeMultiplier = 2.7,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#320385",
		cruiseSpeedMultiplier = 0.7,
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.dreadnought",
		balancingSupplier = IonServer.starshipBalancing::aiDreadnought
	),
	SHUTTLE(
		displayName = "Shuttle",
		minSize = 100,
		maxSize = 1000,
		minLevel = 1,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 2,
		interdictionRange = 300,
		hyperspaceRangeMultiplier = 1.2,
		menuItemMaterial = Material.PRISMARINE_SHARD,
		isWarship = false,
		color = "#008033",
		overridePermission = "ion.ships.override.1",
		poweroverrider = 0.7,
		maxMiningLasers = 1,
		miningLaserTier = 1,
		dynmapIcon = "shuttle",
		balancingSupplier = IonServer.starshipBalancing::shuttle
	),
	AI_SHUTTLE(
		displayName = "Shuttle",
		minSize = 100,
		maxSize = 1000,
		minLevel = 1,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 5,
		maxSneakFlyAccel = 2,
		interdictionRange = 300,
		hyperspaceRangeMultiplier = 1.2,
		menuItemMaterial = Material.SPONGE,
		isWarship = false,
		color = "#008033",
		poweroverrider = 0.7,
		maxMiningLasers = 1,
		miningLaserTier = 1,
		dynmapIcon = "shuttle",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.shuttle",
		balancingSupplier = IonServer.starshipBalancing::aiShuttle
	),
	TRANSPORT(
		displayName = "Transport",
		minSize = 1000,
		maxSize = 2000,
		minLevel = 10,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 600,
		hyperspaceRangeMultiplier = 1.25,
		menuItemMaterial = Material.PRISMARINE_CRYSTALS,
		isWarship = false,
		color = "#008066",
		overridePermission = "ion.ships.override.10",
		poweroverrider = 0.7,
		maxMiningLasers = 1,
		miningLaserTier = 2,
		dynmapIcon = "transport",
		balancingSupplier = IonServer.starshipBalancing::transport
	),
	AI_TRANSPORT(
		displayName = "Transport",
		minSize = 1000,
		maxSize = 2000,
		minLevel = 10,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 600,
		hyperspaceRangeMultiplier = 1.25,
		menuItemMaterial = Material.SPONGE,
		isWarship = false,
		color = "#008066",
		poweroverrider = 0.7,
		maxMiningLasers = 1,
		miningLaserTier = 2,
		dynmapIcon = "transport",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.transport",
		balancingSupplier = IonServer.starshipBalancing::aiTransport
	),
	LIGHT_FREIGHTER(
		displayName = "Light Freighter",
		minSize = 2000,
		maxSize = 4000,
		minLevel = 20,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 900,
		hyperspaceRangeMultiplier = 1.3,
		menuItemMaterial = Material.PRISMARINE_SLAB,
		isWarship = false,
		color = "#008099",
		overridePermission = "ion.ships.override.20",
		poweroverrider = 0.7,
		maxMiningLasers = 2,
		miningLaserTier = 2,
		dynmapIcon = "light_freighter",
		balancingSupplier = IonServer.starshipBalancing::lightFreighter
	),
	AI_LIGHT_FREIGHTER(
		displayName = "Light Freighter",
		minSize = 2000,
		maxSize = 4000,
		minLevel = 20,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 900,
		hyperspaceRangeMultiplier = 1.3,
		menuItemMaterial = Material.SPONGE,
		isWarship = false,
		color = "#008099",
		poweroverrider = 0.7,
		maxMiningLasers = 2,
		miningLaserTier = 2,
		dynmapIcon = "light_freighter",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.light_freighter",
		balancingSupplier = IonServer.starshipBalancing::aiLightFreighter
	),
	MEDIUM_FREIGHTER(
		displayName = "Medium Freighter",
		minSize = 4000,
		maxSize = 8000,
		minLevel = 40,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 1200,
		hyperspaceRangeMultiplier = 1.35,
		menuItemMaterial = Material.PRISMARINE_STAIRS,
		isWarship = false,
		color = "#0080cc",
		poweroverrider = 0.7,
		maxMiningLasers = 4,
		miningLaserTier = 3,
		dynmapIcon = "medium_freighter",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.medium_freighter",
		balancingSupplier = IonServer.starshipBalancing::mediumFreighter
	),
	HEAVY_FREIGHTER(
		displayName = "Heavy Freighter",
		minSize = 8000,
		maxSize = 12000,
		minLevel = 60,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 1500,
		hyperspaceRangeMultiplier = 1.4,
		menuItemMaterial = Material.PRISMARINE,
		isWarship = false,
		color = "#0080ff",
		overridePermission = "ion.ships.override.60",
		poweroverrider = 0.7,
		maxMiningLasers = 6,
		miningLaserTier = 3,
		dynmapIcon = "heavy_freighter",
		balancingSupplier = IonServer.starshipBalancing::heavyFreighter
	),
	AI_HEAVY_FREIGHTER(
		displayName = "Heavy Freighter",
		minSize = 8000,
		maxSize = 12000,
		minLevel = 60,
		containerPercent = 0.045,
		crateLimitMultiplier = 1.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 1500,
		hyperspaceRangeMultiplier = 1.4,
		menuItemMaterial = Material.SPONGE,
		isWarship = false,
		color = "#0080ff",
		poweroverrider = 0.7,
		maxMiningLasers = 6,
		miningLaserTier = 3,
		dynmapIcon = "heavy_freighter",
		concretePercent = 0.0,
		overridePermission = "ion.ships.ai.heavy_freighter",
		balancingSupplier = IonServer.starshipBalancing::aiHeavyFreighter
	),
	PLATFORM(
		displayName = "Platform",
		minSize = 25,
		maxSize = 500000,
		minLevel = 1,
		containerPercent = 100.0,
		crateLimitMultiplier = 100.0,
		concretePercent = 0.0,
		sneakFlyAccelDistance = 0,
		maxSneakFlyAccel = 0,
		interdictionRange = 0,
		hyperspaceRangeMultiplier = 0.0,
		menuItemMaterial = Material.BEDROCK,
		isWarship = false,
		color = "#ffffff",
		overridePermission = "ion.ships.override.1",
		poweroverrider = 0.0,
		balancingSupplier = IonServer.starshipBalancing::platformBalancing
	),
	UNIDENTIFIEDSHIP(
		displayName = "UnidentifiedShip",
		minSize = 25,
		maxSize = 250000,
		minLevel = 69420,
		containerPercent = 100.0,
		concretePercent = 0.0,
		crateLimitMultiplier = 100.0,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 3,
		interdictionRange = 2000,
		hyperspaceRangeMultiplier = 10.0,
		menuItemMaterial = Material.MUD_BRICKS,
		isWarship = true,
		color = "#d0e39d",
		overridePermission = "ion.ships.eventship",
		eventship = true,
		poweroverrider = 2.0,
		balancingSupplier = IonServer.starshipBalancing::eventShipBalancing
	),
	AI_SHIP(
		displayName = "AI Ship",
		minSize = 50,
		maxSize = 48000,
		minLevel = 1000,
		containerPercent = 0.025,
		concretePercent = 0.0,
		crateLimitMultiplier = 0.5,
		sneakFlyAccelDistance = 10,
		maxSneakFlyAccel = 2,
		interdictionRange = 3200,
		hyperspaceRangeMultiplier = 2.7,
		menuItemMaterial = Material.SPONGE,
		isWarship = true,
		color = "#d000d0",
		overridePermission = "ion.ships.aiship",
		balancingSupplier = IonServer.starshipBalancing::eventShipBalancing
	);

	val displayNameMiniMessage: String get() = "<$color>$displayName</$color>"
	val displayNameComponent: Component get() = text(displayName, TextColor.fromHexString(color))

	val menuItem: ItemStack = ItemStack(menuItemMaterial)
		.setDisplayNameAndGet(displayNameComponent)
		.setLoreAndGet(
			listOf(
				"Min Block Count: $minSize",
				"Max Block Count: $maxSize",
				"Min Level: $minLevel",
				"Max Container:Total Blocks Ratio: $containerPercent",
				"Crate Limit Multiplier: $crateLimitMultiplier",
				"Sneak Fly Accel Distance: $sneakFlyAccelDistance",
				"Max Sneak Fly Accel: $maxSneakFlyAccel",
				"Interdiction Range: $interdictionRange",
				"Hyperspace Range Multiplier: $hyperspaceRangeMultiplier",
				"Warship: $isWarship"
			)
		)

	fun canUse(player: Player): Boolean =
		player.hasPermission("starships.anyship") || player.hasPermission(overridePermission) || Levels[player] >= minLevel

	companion object {
		fun getUnlockedTypes(player: Player): List<StarshipType> = values()
			.filter { it.canUse(player) }
			.filter { !it.eventship.and(!player.hasPermission("ion.ships.eventship")) }
			.sortedBy { it.minLevel }
	}
}
